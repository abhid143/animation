import os, site
import numpy as np
from moviepy.editor import *
from PIL import Image

# Setup
os.environ["IMAGEMAGICK_BINARY"] = r"C:\\Program Files\\ImageMagick-7.1.1-Q16-HDRI\\magick.exe"
site.addsitedir(r"C:\\Users\\hp\\AppData\\Roaming\\Python\\Python313\\site-packages")
if not hasattr(Image, 'ANTIALIAS'):
    Image.ANTIALIAS = Image.Resampling.LANCZOS

# Constants
INPUT_DIR = "input"
OUTPUT_FILE = "output/final_output.mp4"
VIDEO_WIDTH, VIDEO_HEIGHT = 1080, 1920
IMAGE_DURATION = 1.8
AMP = 40
FREQ = 2
OVERZOOM = 1.3
FADE_DURATION = 0.5

# Shake + Drop Animation
def apply_shake_with_drop(image_clip, amp=AMP, freq=FREQ):
    W, H = image_clip.size

    def easing_envelope(t, total_duration):
        fade_time = 0.4
        if t < fade_time:
            return t / fade_time
        elif t > total_duration - fade_time:
            return (total_duration - t) / fade_time
        else:
            return 1

    def make_frame(t):
        ease = easing_envelope(t, image_clip.duration)
        dx = amp * np.sin(2 * np.pi * freq * t + np.pi / 4) * ease
        dy = amp * np.cos(2 * np.pi * freq * t + np.pi / 3) * ease

        drop_duration = 0.5
        if t < drop_duration:
            p = t / drop_duration
            drop_offset = (-VIDEO_HEIGHT) * (1 - (1 - p) ** 3)
        else:
            drop_offset = 0

        dx, dy = int(dx), int(dy + drop_offset)

        frame = image_clip.get_frame(t)
        x_start = AMP + dx
        y_start = AMP + dy
        x_end = x_start + VIDEO_WIDTH
        y_end = y_start + VIDEO_HEIGHT

        x_start = max(0, min(x_start, frame.shape[1] - VIDEO_WIDTH))
        y_start = max(0, min(y_start, frame.shape[0] - VIDEO_HEIGHT))
        x_end = x_start + VIDEO_WIDTH
        y_end = y_start + VIDEO_HEIGHT

        return frame[y_start:y_end, x_start:x_end]

    padded_clip = image_clip.crop(
        x_center=W // 2,
        y_center=H // 2,
        width=VIDEO_WIDTH + AMP * 2,
        height=VIDEO_HEIGHT + AMP * 2
    )

    return VideoClip(make_frame=make_frame, duration=image_clip.duration).set_fps(30)

# Process Images
image_clips = []
for idx, filename in enumerate(sorted(os.listdir(INPUT_DIR))):
    if filename.lower().endswith((".jpg", ".jpeg", ".png")):
        path = os.path.join(INPUT_DIR, filename)
        img = Image.open(path)
        img_w, img_h = img.size

        scale_w = (VIDEO_WIDTH * OVERZOOM) / img_w
        scale_h = (VIDEO_HEIGHT * OVERZOOM) / img_h
        scale = max(scale_w, scale_h)

        base_img_clip = (
            ImageClip(path)
            .resize(scale)
            .set_duration(IMAGE_DURATION)
        )

        shake_clip = apply_shake_with_drop(base_img_clip)
        shake_clip = shake_clip.fadein(FADE_DURATION).fadeout(FADE_DURATION)

        final_clip = CompositeVideoClip([shake_clip], size=(VIDEO_WIDTH, VIDEO_HEIGHT))
        image_clips.append(final_clip)

# Set start for each to avoid gaps
for i in range(1, len(image_clips)):
    image_clips[i] = image_clips[i].set_start(i * IMAGE_DURATION)

# Composite all
final_video = CompositeVideoClip(image_clips, size=(VIDEO_WIDTH, VIDEO_HEIGHT))
final_video = final_video.set_duration(len(image_clips) * IMAGE_DURATION)

# Write output
final_video.write_videofile(OUTPUT_FILE, fps=30, preset="ultrafast")
